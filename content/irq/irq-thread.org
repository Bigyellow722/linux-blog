#+title: irq framework -- irq thread
#+author: lhkwqy
#+date:


* data structure

** ~irq_desc~

#+begin_src c
  struct irq_desc {
	  struct irq_common_data	irq_common_data;
	  struct irq_data		irq_data;
	  unsigned int __percpu	*kstat_irqs;
	  irq_flow_handler_t	handle_irq;
	  struct irqaction	*action;	/* IRQ action list */
	  unsigned int		status_use_accessors;
	  unsigned int		core_internal_state__do_not_mess_with_it;
	  unsigned int		depth;		/* nested irq disables */
	  unsigned int		wake_depth;	/* nested wake enables */
	  unsigned int		tot_count;
	  unsigned int		irq_count;	/* For detecting broken IRQs */
	  unsigned long		last_unhandled;	/* Aging timer for unhandled count */
	  unsigned int		irqs_unhandled;
	  atomic_t		threads_handled;
	  int			threads_handled_last;
	  raw_spinlock_t		lock;
	  struct cpumask		*percpu_enabled;
	  const struct cpumask	*percpu_affinity;
  #ifdef CONFIG_SMP
	  const struct cpumask	*affinity_hint;
	  struct irq_affinity_notify *affinity_notify;
  #ifdef CONFIG_GENERIC_PENDING_IRQ
	  cpumask_var_t		pending_mask;
  #endif
  #endif
	  unsigned long		threads_oneshot;
	  atomic_t		threads_active;
	  wait_queue_head_t       wait_for_threads;
  #ifdef CONFIG_PM_SLEEP
	  unsigned int		nr_actions;
	  unsigned int		no_suspend_depth;
	  unsigned int		cond_suspend_depth;
	  unsigned int		force_resume_depth;
  #endif
  #ifdef CONFIG_PROC_FS
	  struct proc_dir_entry	*dir;
  #endif
  #ifdef CONFIG_GENERIC_IRQ_DEBUGFS
	  struct dentry		*debugfs_file;
	  const char		*dev_name;
  #endif
  #ifdef CONFIG_SPARSE_IRQ
	  struct rcu_head		rcu;
	  struct kobject		kobj;
  #endif
	  struct mutex		request_mutex;
	  int			parent_irq;
	  struct module		*owner;
	  const char		*name;
  } ____cacheline_internodealigned_in_smp;


#+end_src

#+begin_src 

#+end_src

** irqaction

#+begin_src c
  struct irqaction {
	  irq_handler_t		handler;
	  void			*dev_id;
	  void __percpu		*percpu_dev_id;
	  struct irqaction	*next;
	  irq_handler_t		thread_fn;
	  struct task_struct	*thread;
	  struct irqaction	*secondary;
	  unsigned int		irq;
	  unsigned int		flags;
	  unsigned long		thread_flags;
	  unsigned long		thread_mask;
	  const char		*name;
	  struct proc_dir_entry	*dir;
  } ____cacheline_internodealigned_in_smp;
#+end_src

*** ~thread_flags~

#+begin_src c
/*
 * Bits used by threaded handlers:
 * IRQTF_RUNTHREAD - signals that the interrupt handler thread should run
 * IRQTF_WARNED    - warning "IRQ_WAKE_THREAD w/o thread_fn" has been printed
 * IRQTF_AFFINITY  - irq thread is requested to adjust affinity
 * IRQTF_FORCED_THREAD  - irq action is force threaded
 * IRQTF_READY     - signals that irq thread is ready
 */
enum {
	IRQTF_RUNTHREAD,
	IRQTF_WARNED,
	IRQTF_AFFINITY,
	IRQTF_FORCED_THREAD,
	IRQTF_READY,
};
#+end_src

** ~irq_chip~

#+begin_src c
  struct irq_chip {
	  const char	*name;
	  unsigned int	(*irq_startup)(struct irq_data *data);
	  void		(*irq_shutdown)(struct irq_data *data);
	  void		(*irq_enable)(struct irq_data *data);
	  void		(*irq_disable)(struct irq_data *data);

	  void		(*irq_ack)(struct irq_data *data);
	  void		(*irq_mask)(struct irq_data *data);
	  void		(*irq_mask_ack)(struct irq_data *data);
	  void		(*irq_unmask)(struct irq_data *data);
	  void		(*irq_eoi)(struct irq_data *data);

	  int		(*irq_set_affinity)(struct irq_data *data, const struct cpumask *dest, bool force);
	  int		(*irq_retrigger)(struct irq_data *data);
	  int		(*irq_set_type)(struct irq_data *data, unsigned int flow_type);
	  int		(*irq_set_wake)(struct irq_data *data, unsigned int on);

	  void		(*irq_bus_lock)(struct irq_data *data);
	  void		(*irq_bus_sync_unlock)(struct irq_data *data);

  #ifdef CONFIG_DEPRECATED_IRQ_CPU_ONOFFLINE
	  void		(*irq_cpu_online)(struct irq_data *data);
	  void		(*irq_cpu_offline)(struct irq_data *data);
  #endif
	  void		(*irq_suspend)(struct irq_data *data);
	  void		(*irq_resume)(struct irq_data *data);
	  void		(*irq_pm_shutdown)(struct irq_data *data);

	  void		(*irq_calc_mask)(struct irq_data *data);

	  void		(*irq_print_chip)(struct irq_data *data, struct seq_file *p);
	  int		(*irq_request_resources)(struct irq_data *data);
	  void		(*irq_release_resources)(struct irq_data *data);

	  void		(*irq_compose_msi_msg)(struct irq_data *data, struct msi_msg *msg);
	  void		(*irq_write_msi_msg)(struct irq_data *data, struct msi_msg *msg);

	  int		(*irq_get_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool *state);
	  int		(*irq_set_irqchip_state)(struct irq_data *data, enum irqchip_irq_state which, bool state);

	  int		(*irq_set_vcpu_affinity)(struct irq_data *data, void *vcpu_info);

	  void		(*ipi_send_single)(struct irq_data *data, unsigned int cpu);
	  void		(*ipi_send_mask)(struct irq_data *data, const struct cpumask *dest);

	  int		(*irq_nmi_setup)(struct irq_data *data);
	  void		(*irq_nmi_teardown)(struct irq_data *data);

	  unsigned long	flags;
  };


#+end_src



* how to handle irq

#+begin_src dot :file pic/handle-irq.png
  digraph {
	  rankdir = LR
	  node [shape=record]

	  handle_simple_irq -> handle_irq_event;
	  handle_level_irq -> handle_irq_event;
	  handle_fasteoi_irq -> handle_irq_event;
	  handle_edge_irq -> handle_irq_event;
	  handle_edge_eoi_irq -> handle_irq_event;
	  handle_fasteoi_ack_irq -> handle_irq_event;
	  handle_fasteoi_mask_irq -> handle_irq_event;

  };


#+end_src
