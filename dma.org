#+title: how to use dma api in kernel
#+author: lhkwqy
#+date:

* The different address spaces

** virtual addresses

The kernel normally uses virtul addresses. Any address returned by kmalloc(), vmalloc(), and similar interfaces is a virtual address and can be stored in a ``void *``.

** physical addresses

The virtual memory system (TLB, page tables, etc.) translates virtual addresses to CPU physical addresses, which are stored as "phys_addr_t" or "resource_size_t".  The kernel manages device resources like registers as physical addresses.  These are the addresses in /proc/iomem.  The physical address is not directly useful to a driver; it must use ioremap() to map the space and produce a virtual address.


** bus addresses

I/O devices use a third kind of address: a "bus address".  If a device has registers at an MMIO address, or if it performs DMA to read or write system memory, the addresses used by the device are bus addresses.  In some systems, bus addresses are identical to CPU physical addresses, but in general they are not.  IOMMUs and host bridges can produce arbitrary mappings between physical and bus addresses.

From a device's point of view, DMA uses the bus address space, but it may be restricted to a subset of that space.

* How to use the dynamic DMA mapping

First of all, we should make sure:

#+begin_src c
  #include <linux/dma-mapping.h>
#+end_src

** Unwritten set of rules
*** What memery is DMA'able?

- Address that can be used for DMA
  If you acquired your memory via the page allocator (i.e. ~__get_free_page*()~) or the generic memory allocators (i.e. ~kmalloc()~ or ~kmem_cache_alloc()~) then you may DMA to/from that memory using the addresses returned from those routines.

- Address that can't be used for DMA
  This means specifically that you may not use the memory/addresses returned from vmalloc() for DMA. 
  This rule also means that you may use neither kernel image addresses(items in data/text/bss/ segments), nor module image addresses, nor stack addresses for DMA.

Even if those classes of memory could physically work with DMA, you'd need to ensure the I/O buffers were cacheline-aligned. So, this means that you cannot take the return of a kmap() call and DMA to/from that.

** DMA addressing capabilities

We can set the DMA mask to inform the kernel about our devices DMA addressing capabilities.

#+begin_src c
  int dma_set_mask_and_coherent(struct device *dev, u64 mask);
#+end_src

This api will set the mask for both streaming and coherent APIs together.

If you have some special requirements, then the following two separate calls can be used instead:
The setup for streaming mappings is performed via a call to ~dma_set_mask()~

#+begin_src c
  int dma_set_mask(struct device *dev, u64 mask);
#+end_src

The setup for consistent allocations is performed via a call to ~dma_set_coherent_mask()~
#+begin_src c
  int dma_set_coherent_mask(struct device *dev, u64 mask);
#+end_src

a example:

The standard 64-bit addressing device would do something like this:

#+begin_src c
  if (dma_set_mask_and_coherent(dev, DMA_BIT_MASK(64))) {
      dev_warn(dev, "mydev: No suitable DMA available\n");
      goto ignore_this_device;
   }
#+end_src

If the device only supports 32-bit addressing for descriptors in the coherent allocations, but supports full 64-bits for streaming mappings it would look like this:

#+begin_src c
  if (dma_set_mask(dev, DMA_BIT_MASK(64))) {
      dev_warn(dev, "mydev: No suitable DMA available\n");
      goto ignore_this_device;
   }
#+end_src

** Types of DMA mapping

*** Using Consistent DMA mappings

- large memory
    To allocate and map large (PAGE_SIZE or so) consistent DMA regions, you should do:
    #+begin_src c
	    dma_addr_t dma_handle;
	    cpu_addr = dma_alloc_coherent(dev, size, &dma_handle, gfp);
    #+end_src
    This routine will allocate RAM for that region, so it acts similarly to ~__get_free_pages()~. If your driver needs regions sized smaller than a page, you may prefer using the dma_pool interface, described below.

    ~dma_alloc_coherent~ returns two values: the virtual address which you can use to access it from the CPU and dma_handle which you pass to the card.

    The CPU virtual address and the DMA address are both guaranteed to be aligned to the smallest PAGE_SIZE order which is greater than or equal to the requested size.

    To unmap and free such a DMA region, we call:
    #+begin_src c
      dma_free_coherent(dev, size, cpu_addr, dma_handle);
    #+end_src

These above functions may not be called in interrupt context.

- small memory
  If your driver needs lots of smaller memory regions, you can write custom code to subdivide pages returned by ~dma_alloc_coherent()~,  or you can use the dma_pool API to do that.

  Create a dma_pool:

  #+begin_src c
    struct dma_pool *pool;
    pool = dma_pool_create(name, dev, size, align, boundary);
  #+end_src
